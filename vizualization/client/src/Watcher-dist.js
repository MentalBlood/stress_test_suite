"use strict";const{Chart:Chart,Geom:Geom,Axis:Axis,Tooltip:Tooltip,LineAdvance:LineAdvance,Coord:Coord,Label:Label,Legend:Legend,View:View,Guide:Guide,Shape:Shape}=window.BizCharts;function postJson(e,t,a){const s=new XMLHttpRequest;s.open("POST",e,!0),s.setRequestHeader("Content-Type","application/json"),s.setRequestHeader("Access-Control-Allow-Origin","*"),s.onreadystatechange=a,s.send(JSON.stringify(t))}function CustomChart(e,t,a,s){const n=Object.keys(t)[0],i=Object.keys(t)[1];return console.log(e,n,i),React.createElement(Chart,{height:s,data:e,padding:"auto",forceFit:!0},React.createElement(Axis,{name:n}),React.createElement(Axis,{name:i}),React.createElement(Tooltip,{crosshairs:{type:"line"}}),React.createElement(Geom,{type:"area",position:`${i}*${n}`,color:"orange"}),React.createElement(Geom,{type:"line",position:`${i}*${n}`,size:2,color:"orange"}))}class Watcher extends React.Component{constructor(e){super(e),this.state={vizualization_server_address:"http://10.1.13.136:8003",data:void 0,bar_width:"40%",bar_element_padding:"1vw"},this.save=this.save.bind(this),this.load=this.load.bind(this)}getPage(){const e=this.state.vizualization_server_address,t=this.setState.bind(this);postJson(e+"/get",{name:"template"},(function(){4==this.readyState&&200==this.status&&t({data:JSON.parse(this.response)})}))}componentDidMount(){setInterval(this.getPage.bind(this),1e3)}getSaveData(){return this.state}save(){const e=this.getSaveData(),t=JSON.stringify(e),a=new Date,s=a.getFullYear().toString()+"-"+(a.getMonth()+1).toString()+"-"+a.getDate().toString(),n=a.getHours()+":"+a.getMinutes()+":"+a.getSeconds();downloadFile("visualisation_client-save-"+s+"-"+n+".json",t)}setSaveData(e){this.setState(e)}load(){uploadFile("json",(e=>{const t=JSON.parse(e);this.setSaveData(t)}))}getSaveLoadButtons(){return React.createElement("div",{className:"saveLoadButtons"},React.createElement("button",{className:"saveButton",onClick:this.save},"save"),React.createElement("button",{className:"loadButton",onClick:this.load},"load"))}getWatcherElements(){const e=this.state.data,t=this.state.bar_width,a=this.state.bar_element_padding,s=`min(2vw, calc(calc(100vh / ${e.length}) - calc(2 * ${a})))`;return React.createElement("div",{className:"WatcherElements"},Object.entries(e).map(((e,n)=>{const i=100*e[1].current/e[1].total,c=e[1].average_speed;return React.createElement("div",{className:"WatcherElement",key:n,style:{width:"100%"}},React.createElement("div",{className:"BarElement",style:{padding:a,width:`calc(100% - calc(2 * ${a}))`,height:s}},React.createElement("div",{className:"BarDescription",style:{width:`calc(100% - ${t})`,fontSize:s}},React.createElement("div",{className:"name"},e[0]),React.createElement("div",{className:"average_speed"},c.toFixed(2)," it/s")),React.createElement("div",{className:"Bar",style:{width:t}},React.createElement("div",{className:"BarMoving",style:{width:i+"%"}}),React.createElement("div",{className:"BarPercents",style:{width:t,fontSize:s}},e[1].current+"/"+e[1].total+"  ("+Math.floor(i)+"%)"))),React.createElement("div",{className:"ChartElement",style:{width:"100%"}},CustomChart(e[1].chart_data,{average_speed:{min:0,max:Math.max(...e[1].chart_data.map((e=>e.average_speed)))},elapsed:{range:[0,Math.max(...e[1].chart_data.map((e=>e.elapsed)))]}},600,300)))})))}render(){const e=this.state.data;return React.createElement("div",{className:"Watcher"},this.getSaveLoadButtons(),e?this.getWatcherElements():null)}}